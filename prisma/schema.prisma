generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id               String       @id @default(cuid())
  email            String       @unique
  password         String
  name             String
  bio              String?
  avatarUrl        String?      @map("avatar_url")
  website          String?
  createdAt        DateTime     @default(now()) @map("created_at")
  updatedAt        DateTime     @updatedAt @map("updated_at")
  featured         Boolean      @default(false)
  role             UserRole     @default(USER)
  resetToken       String?      @map("reset_token") @db.VarChar(255)
  resetTokenExpiry DateTime?    @map("reset_token_expiry") @db.Timestamptz(6)
  comments         Comment[]
  poems            Poem[]       @relation("AuthoredPoems")
  reviewedPoems    Poem[]       @relation("ReviewedPoems")
  starRatings      StarRating[]

  @@map("users")
}

model Poem {
  id              String        @id @default(cuid())
  title           String
  content         String
  authorId        String        @map("author_id")
  publishedAt     DateTime?     @map("published_at")
  readingTime     Int?          @map("reading_time")
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")
  rejectionReason String?       @map("rejection_reason")
  reviewedAt      DateTime?     @map("reviewed_at")
  reviewedBy      String?       @map("reviewed_by")
  status          PoemStatus    @default(DRAFT)
  averageRating   Float         @default(0) @map("average_rating")
  ratingCount     Int           @default(0) @map("rating_count")
  comments        Comment[]
  tags            PoemTag[]
  author          User          @relation("AuthoredPoems", fields: [authorId], references: [id], onDelete: Cascade)
  reviewer        User?         @relation("ReviewedPoems", fields: [reviewedBy], references: [id])
  siteSettings    SiteSettings? @relation("FeaturedPoem")
  starRatings     StarRating[]

  @@map("poems")
}

model Tag {
  id    String    @id @default(cuid())
  name  String    @unique
  poems PoemTag[]

  @@map("tags")
}

model PoemTag {
  poemId String @map("poem_id")
  tagId  String @map("tag_id")
  poem   Poem   @relation(fields: [poemId], references: [id], onDelete: Cascade)
  tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([poemId, tagId])
  @@map("poem_tags")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  authorId  String   @map("author_id")
  poemId    String   @map("poem_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  poem      Poem     @relation(fields: [poemId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model StarRating {
  userId    String   @map("user_id")
  poemId    String   @map("poem_id")
  rating    Int
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  poem      Poem     @relation(fields: [poemId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, poemId])
  @@map("star_ratings")
}

model ContactSubmission {
  id        String   @id @default(cuid())
  name      String
  email     String
  category  String
  subject   String
  message   String
  status    String   @default("unread")
  createdAt DateTime @default(now()) @map("created_at")

  @@map("contact_submissions")
}

model Feedback {
  id        String   @id @default(cuid())
  name      String
  email     String
  rating    Int
  comment   String
  createdAt DateTime @default(now()) @map("created_at")

  @@map("feedback")
}

model SiteSettings {
  id             String    @id @default(cuid())
  featuredPoemId String?   @unique @map("featured_poem_id")
  featuredAt     DateTime? @map("featured_at")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")
  featuredPoem   Poem?     @relation("FeaturedPoem", fields: [featuredPoemId], references: [id])

  @@map("site_settings")
}

model Announcement {
  id          String    @id @default(cuid())
  title       String
  content     String
  priority    Int       @default(0)
  publishedAt DateTime? @map("published_at")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  @@map("announcements")
}

enum UserRole {
  USER
  ADMIN
}

enum PoemStatus {
  DRAFT
  SUBMITTED
  PUBLISHED
  REJECTED
}
